Kata1
ImperativeVsDeclarativeExample1.java
- Cual es una de las ventajas de los streams? y como se tendría que hacer para cuando se trabaje con forma declarativa
- Hacer la suma acumulada del 0 al 100 de forma declarativa
- Hacer la suma de forma imperativa

Kata2
ImperativeVsDeclarativeExample2.java
De la siguiente lista remover los duplicados de forma declarativa e imperativa
List<Integer> integerList =Arrays.asList(1,2,3,4,4,5,5,6,7,7,8,9,9);

###################################################################
Lambdas and Functional Interfaces
com.learnJava.functionalInterfaces
###################################################################

Kata3 [A_ConsumerExample] => https://www.udemy.com/course/modern-java-learn-java-8-features-by-coding-it/learn/lecture/10515332#overview
Cual es la caracteristica de un Consumer
Hacer un Consumer que imprima un valor en upper case

=> Hacer que con un forEach imprimar la lista de los estudiantes (dado que ya se tiene implementado en toString de cada estudiante -> StudentDataBase.getAllStudents()
=> Hacer que se ejecute primer un consumer para imprimir el nombre en mayusculas y después que imprima las actividades
=> Hacer un filtrado que unicamente despliegue los alumnos con gradeLevel = 4 y gpa = 3.9 (solamente usando consumer)
Que es hacer consumer chaining?
Que es una interfaz funcional y da 4 ejemplos (+ su firma)
Cuales son Primary interfaces      y sus correspondientes      Extensions (hay 3 para uno de esos ejemplos)




Kata4 [B_BiConsumerExample] => https://www.udemy.com/course/modern-java-learn-java-8-features-by-coding-it/learn/lecture/10525390#overview
Cual es el metodo que ejecuta un BiConsumer
Caracteristica del porque se llama Bi, como confirmar este hecho
Hacer un Biconsumer que imprima el nombre y las actividades de estudiantes (a pesar que este ejercicio es repetido con la kata anterior, hacerlo de todas formas con un biconsumer)
Concatenar operaciones que muestren en consola los resultados de sumar dividir y mulitplicar

Que esta mal de la siguiente instrucción:
static BiConsumer<int,int> suma = (n1,n2)-> System.out.println(n1+n2);

Dos metodos de Consumer y BiConsumer (ver implementaciones del JDK si es necesario)



Kata5 [C_PredicateExample]
Cual es el signature de un Predicate
Cual es el metodo que ejecuta un predicate
Hacer el ejercicio con s.getGpa() >= 4 y s.getNoteBooks() >= 15
Cuales son los metodos default de un Predicate (3 como minimo)... usar cada uno de ellos


Kata6 [D_PredicateStudentExample ignorar -> Function<Integer,Predicate<Integer>>]
Hacer un mismo filtrado usando .forEach() y .filter() con un predicate de esta lista StudentDataBase.getAllStudents() que la condición sea que gpa >= 3.9 (Imprimir solo la versión toString)  [Imprimir el objeto de la lista con filter y el nombre del estudiante en el forEach]
Revisar la duda de como funciona Function

Kata [E_PredicateAndConsumerExample]
----Definir (inicio)----
Hacer dos Predicates:
- getGradeLevel()>=3
- s.getGpa()>=3.9
Hacer un biConsumer para que pueda imprimir --> name + " : " + activities
----Definir (fin)----

Hacer un consumer con los dos predicates y si se cumple la condición hacer uso del biConsumer, crear metodo para desplegar la información

Kata [F_BiPredicateExample]
Hacer con biPredictate (forEach, como en E_]:
- getGradeLevel()>=3
- s.getGpa()>=3.9

Kata [G_FunctionExample + I_FunctionStudentExample + H_FunctionExample1 (IGNORAR) + D_PredicateStudentExample (Function<Integer,Predicate<Integer>>)]
=> G_FunctionExample
        Cuales son los dos metodos default (y el metodo abstracto de Function)?
=> I_FunctionStudentExample
        Hacer una lista de estudiantes y regresa un mapa con su nombre y GPA cuyo getGradeLevel()>=3
        Distinción importante del tipo de retorno en Function

Kata [J_BiFunctionExample]
Cual es el unico metodo default que tiene BiFunction
Hacer una lista de estudiantes y regresa un mapa con su nombre y GPA cuyo getGradeLevel()>=3 ... pero que el predicate se le pase como parametro


Kata [K_UnaryOperatorExample + L_BinaryOperatorExample]
K_UnaryOperatorExample
De que extiende UnaryOperator?
Característica de UnaryOperator

L_BinaryOperatorExample
Hacer una multiplicación de dos numeros
De que extiende BinaryOperator y cual es la caracteristica de los genericos
Cuales son los metodos estaticos


Kata [M_SupplierExample]
Cual es la firma de Supplier
usar e imprimir en consola, usar tambien SudentDatabase (hacer 2 suppliers)
new Student("Adam",2,4.0,"male", Arrays.asList("swimming", "basketball","volleyball"))

###################################################################
Method Reference -> [Section 9] -> https://www.udemy.com/course/modern-java-learn-java-8-features-by-coding-it/learn/lecture/10654424#overview
com.learnJava.methodreferences
###################################################################
Kata [A_FunctionMethodReferenceExample]
- Hace dos Function, uno con lambda y otro con Method Reference que recibe un String y regresa el uppercase
- Imprimir en consola (usando ambos)
- Hacer el ejercicio de convertir un lambda a method reference


Kata [B_ConsumerMethodReferenceExample]
Fuente: https://www.udemy.com/course/modern-java-learn-java-8-features-by-coding-it/learn/lecture/10667460#overview
- Hacer un Consumer con Method Reference que imprima los objetos (implementacion del toString) => StudentDataBase.getAllStudents()
- Hacer dos Consumers que imprima printListOfActivities
* Usando lambda
* Usando method reference


Kata [C_RefactorMethodReferenceExample]
... al final de esta kata se deben tener 3 sout's
- Hacer una combinación de Predicate y Supplier en la que se imprima si la condición s.getGradeLevel()>=3 es verdadera o falsa
Crear el supplier con la siguiente información:
new Student("Adam",2,4.0,"male", Arrays.asList("swimming", "basketball","volleyball"))

- Hacer uso de MethodReference del caso anterior
- Hacer uso de MethodReference pero con BiPredicate

Kata [D_SupplierMethodReferenceExample]
Que estaría mal al usar Constructor Reference? y cual es el requerimiento para poder usar?
Mandar llamar el constructor de Student para que mande llamar Hello World

Usar constructor reference con el constructor que setea el nombre del Student












11/14 [Udemy]
9:05 - 9:25
2:19 - 2:42
3:36 - 3:48
5:09 - 5:34

11/15 [Katas]
Kata4
Kata5
Kata6
9:07 - 9:28
11:13 - 11:40
9:10 - 9:22
